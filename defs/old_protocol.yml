# encoding: utf-8
---
:general:
  :separator: "\t"
  :suffix: "\n"
  :hello_prefix: !ruby/regexp /OK MPD/
  :separator: !ruby/regexp /:\s/

:response:
  :success: 
    :regexp: !ruby/regexp /OK\Z/
  :failure: 
    :regexp: !ruby/regexp /ACK\s\[\w*\@\d*\]\s\{\w*\}\s.*\Z/
    :error:
      :code: !ruby/regexp /\d*/
      :offset: !ruby/regexp /\d*/
      :command: !ruby/regexp /\{\w*\}/ # Fix this regexp
      :message_text: !ruby/regexp /(.*\s)/ # Fix this regexp

:commands:
  :querying:
    :clearerror: {}
    :currentsong:
      :arguments: {}
      :response:
        :song_info
    :idle:
      :arguments:
        :subsystems: []
      # Complete response
      :response:
        - :database
        - :update
        - :stored_playlist
        - :playlist
        - :player
        - :mixer
        - :output
        - :options
        # ['repeat', 'random', 'crossfade', 'replay_gain']
        - :sticker
        - :subscription
        - :message
    :status:
      :arguments: {}
      # Complete response
      :response:
        :volume:
          :value: 'Integer'
        :repeat:
          :value: 'Boolean'
        :random:
          :value: 'Boolean'
        :single:
          :value: 'Boolean'
        :consume:
          :value: 'Boolean'
        :playlist:
          :value: 'Integer'
        :playlist_length:
          :value: 'Integer'
        :state:
          :value: 'Boolean'
          :valid: ['play', 'stop', 'pause']
        :song:
          :value: 'Integer'
        :song_id:
          :value: 'Integer'
        :next_song:
          :value: 'Integer'
        :next_song_id:
          :value: 'Integer'
        :time:
          :value: 'Integer'
        :elapsed:
          :value: 'Integer'
        :bitrate:
          :value: 'Integer'
        :xfade:
          :value: 'Integer'
        :mrxramp_db:
          :value: 'Integer'
        :mixramp_delay:
          :value: 'Integer'
        #:audio:
        #  :value: // # sampleRate:bits:channels COMPLETE REGEXP
        #:updatings_db:
        #  :value: 'Integer'
        :error:
          :value: 'String'
    :stats:
      # Add arguments ()
      :arguments: {}
      # Complete! response
      :response:
        :artists: {}
        :albums: {}
        :songs: {}
        :uptime: {}
        :db_playtime: {}
        :db_update: {}
        :playtime: {}

  :playback:
    :consume:
      :state: 'Boolean'
    :crossfade:
      :seconds: 'Integer'
    :mixramp_db:
      :decibels: 'Integer'
    :mixramp_delay:
      :delay: 'Integer'
    :random:
      :state: 'Boolean'
    :repeat:
      :state: 'Boolean'
    :set_vol:
      :level: 'Integer'
    :single:
      :state: 'Boolean'
    :replay_gain_mode:
      :mode: 'String'
      :valid: ['off', 'track', 'album', 'auto']
    :replay_gain_status: {}
    :next: {}
    #   No args
    :pause:
      :state: 'Boolean'
    :play:
      :song_pos: 'Integer'
    :play_id:
      :song_id: 'Integer'
    :previous: {}
    :seek:
      :song_pos: 'Integer'
      :time: 'Integer'
    :seek_id:
      :song_id: 'Integer'
      :time: 'Integer'
    :seek_cur:
      :time: 'Integer' # + / -
    :stop: {}

  :playlist:
    :current:
      :add: {}
      # :arg: 'URI' (String)
      :add_id: {}
      # :arg: 'URI' (String)
      :clear: {}
      # No args
      :delete: {}
      # ('POS', 'START:END')
      :delete_id: {}
      # ('SONGID')
      :move: {}
      # ('START:END', 'TO')
      :move_id: {}
      # ('FROM (song_id)', 'TO (playlist_index)')
      :playlist: {}
      # Deprecated
      :playlist_find: {}
      # ('TAG', 'NEEDLE') - strict matching
      :playlist_id: {}
      # ('song_id') - optional
      :playlist_info: {}
      # ('SONGPOS' || 'START:END' - range)
      :playlist_search: {}
      # ('TAG', 'NEEDLE')
      :pl_changes: {}
      # ('VERSION')
      :pl_changes_pos_id: {}
      # ('VERSION')
      :prio: {}
      # ('PRIORITY (0-255)', 'START:END' - range)
      :prio_id: {}
      # ('PRIORITY (0-255)', 'START:END' - range)
      :shuffle: {}
      # ('START:END') - optional
      :swap: {}
      # (SONG1, SONG2) - position
      :swap_id: {}
      # (SONG1, SONG2) - song_id

    :stored:
      :list_playlist: {}
      # 'NAME', 'String'
      :list_playlist_info: {}
      # 'NAME', 'String'
      :list_playlists: {}
      # No args
      :load: {}
      # 'NAME', 'String'
      # 'START:END', 'Range'
      :playlist_add: {}
      # 'NAME', 'String'
      # 'URI', 'String'
      :playlist_clear: {}
      # 'NAME', 'String'
      :playlist_delete: {}
      # 'NAME', 'String'
      # 'SONGPOS', 'Position'
      :playlist_move: {}
      # 'NAME', 'String'
      # 'SONGID', 'SongID'
      # 'SONGPOS', 'Position'
      :rename: {}
      # 'NAME', 'String'
      # 'NEW_NAME', 'String'
      :rm: {}
      # 'NAME', 'String'
      :save: {}
      # 'NAME', 'String'

    :database:
      :count: {}
      :find: {}
      :find_add: {}
      :list: {}
      :list_all: {}
      :list_all_info: {}
      :ls_info: {}
      :search: {}
      :search_add: {}
      :search_add_pl: {}
      :update: {}
      :rescan: {}

    :stickers:
      - :sticker_get
      - :sticker_set
      - :sticker_delete
      - :sticker_list
      - :sticker_find

    :connection:
      - :close
      - :kill
      - :password
      - :ping

    :audio_output:
      - :disable_output
      - :enable_output
      - :outputs

    :reflection:
      - :config
      - :commands
      - :not_commands
      - :tag_types
      - :url_handlers
      - :decoders

    :client:
      - :subscribe
      - :unsubscribe
      - :channels
      - :read_messages
      - :send_message
